include:
  - project: 'camelot/support/templates/gitlab-releases-ci-template'
    ref: 'v2.2.0'
    file: '/templates/changelog.and.releases.yml'  # not ideal with Python
    #file: '/templates/changelog.and.releases.pep440.yml'    # better with Python
  - project: 'camelot/support/templates/python-ci-template'
    ref: 'v5.9.84'
    file: '/templates/python.single.yml'
  - project: 'camelot/support/templates/python-ci-template'
    ref: 'v5.9.84'
    file: '/templates/python.publish.yml'


variables:
  # path to source code projects
  PYTHON_PROJECT_PATH: "."
  PYTHON_MODULE_NAME: "capycli"
  PYTHON_TEST_CODE_PATH: "tests"
  # Disable Code Quality Check
  ENABLE_CODE_QUALITY_CHECK: "false"
  SONAR_JOBS_ACTIVE: "false"
  ENABLE_PYTHON_PRECOMMIT: "false"
  BASE_IMAGE_REF: "bookworm"
  SEMREL_CHANGELOG_FILE: "CHANGELOG_camelot.md"
  PULL_BRANCH_NAME: "pull-from-upstream"
  PULL_REQUEST_BRANCH: "create-pull-request"
  GITHUB_USERNAME: "Catalin-Roman" # TODO Replace
  GITHUB_REPO: "capycli" # TODO Replace

stages:
  - version
  - pull-from-upstream
  - create-pull-request
  - build
  - package
  - test
  - swag
  - publish
  - release

pull:
  stage: pull-from-upstream
  image: cr.siemens.com/camelot/support/container/gitlab-runner/curl:v0.12.20
  before_script:
  - export http_proxy=${CODE_PROXY}
  - export https_proxy=${CODE_PROXY}
  - export no_proxy=127.0.0.1,localhost,.siemens.de,.siemens.net,.siemens.com,.siemens.io,s3.dualstack.eu-central-1.amazonaws.com
  script:
    # Configure git and check curl
    - echo "Syncing with upstream repository..."
    - git config --global user.email "${GIT_AUTOMATION_EMAIL}"
    - git config --global user.name "${GIT_AUTOMATION_NAME}"
    - git config --list | grep user
    - curl --version
    # Configure the remotes
    - git remote set-url origin https://${GIT_AUTOMATION_EMAIL}:${GIT_AUTOMATION_TOKEN}@code.siemens.com/camelot/tools/capycli.git
    - git remote add upstream https://github.com/sw360/capycli.git
    - git remote -v
    # Update the local "upstream_main" branch with the changes from upstream/main and push the changes
    - git fetch upstream main -v
    - git status
    - git checkout upstream_main
    - git merge upstream/main -v # we expect no conflicts
    - git log --oneline --decorate --graph --max-count 10
    - git push -o ci.skip -v
    # Create the intermediate branch from fork_main and merge upstream_main into it
    - git checkout -b ${PULL_BRANCH_NAME} origin/fork_main
    - git push origin ${PULL_BRANCH_NAME} --force -o ci.skip
    - git merge upstream_main || echo "ERROR Merge failed, continuing anyway"
    - |
      curl --request POST "https://code.siemens.com/api/v4/projects/399725/merge_requests" \
        --header "PRIVATE-TOKEN: ${GIT_AUTOMATION_TOKEN}" \
        --header "Content-Type: application/json" \
        --data "{
          \"source_branch\": \"${PULL_BRANCH_NAME}\",
          \"target_branch\": \"fork_main\",
          \"title\": \"chore: pull from upstream repository\",
          \"description\": \"This Merge Request pulls the changes from the upstream repository and applies them to the fork.\",
          \"remove_source_branch\": true,
          \"squash\": true,
          \"assignee_ids\": [50618]
        }"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
  tags:
    - "$CI_RUNNER_TAG_SHARED"


create-github-pull-request:
  stage: create-pull-request
  image: cr.siemens.com/camelot/support/container/gitlab-runner/curl:v0.12.20
  before_script:
  - export http_proxy=${CODE_PROXY}
  - export https_proxy=${CODE_PROXY}
  - export no_proxy=127.0.0.1,localhost,.siemens.de,.siemens.net,.siemens.com,.siemens.io,s3.dualstack.eu-central-1.amazonaws.com
  script:
    - echo "Creating pull request from $PULL_REQUEST_BRANCH to upstream repository..."
    - git config --global user.email "${GIT_AUTOMATION_EMAIL}"
    - git config --global user.name "${GIT_AUTOMATION_NAME}"
    - git config --list | grep user
    - curl --version
    - |
      curl --request POST "https://api.github.com/repos/$GITHUB_USERNAME/$GITHUB_REPO/pulls" \
      --header "Authorization: token $GITHUB_TOKEN" \
      --header "Content-Type: application/json" \
      --data "{
        \"title\": \"Auto PR from GitLab\",
        \"head\": \"${GITHUB_USERNAME}:${PULL_REQUEST_BRANCH}\",
        \"base\": \"main\",
        \"body\": \"This PR was created automatically from GitLab CI/CD.\"
      }"
  when: manual
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == $PULL_REQUEST_BRANCH'
      when: manual
    - when: never
  tags:
    - "$CI_RUNNER_TAG_SHARED"
